// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	PasetoAuthScopes = "PasetoAuth.Scopes"
)

// Defines values for AnalysisDataFormsLoginFormDetailsMethod.
const (
	AnalysisDataFormsLoginFormDetailsMethodPOST AnalysisDataFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisErrorStatus.
const (
	AnalysisErrorStatusFailed AnalysisErrorStatus = "failed"
)

// Defines values for AnalysisInProgressStatus.
const (
	InProgress AnalysisInProgressStatus = "in_progress"
)

// Defines values for AnalysisResponseStatus.
const (
	AnalysisResponseStatusCompleted  AnalysisResponseStatus = "completed"
	AnalysisResponseStatusFailed     AnalysisResponseStatus = "failed"
	AnalysisResponseStatusInProgress AnalysisResponseStatus = "in_progress"
	AnalysisResponseStatusRequested  AnalysisResponseStatus = "requested"
)

// Defines values for AnalysisResultResultsFormsLoginFormDetailsMethod.
const (
	AnalysisResultResultsFormsLoginFormDetailsMethodPOST AnalysisResultResultsFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisResultStatus.
const (
	Completed AnalysisResultStatus = "completed"
)

// Defines values for CacheDependencyCheckStatus.
const (
	CacheDependencyCheckStatusHealthy   CacheDependencyCheckStatus = "healthy"
	CacheDependencyCheckStatusUnhealthy CacheDependencyCheckStatus = "unhealthy"
	CacheDependencyCheckStatusUnknown   CacheDependencyCheckStatus = "unknown"
)

// Defines values for DependencyCheckStatus.
const (
	DependencyCheckStatusHealthy   DependencyCheckStatus = "healthy"
	DependencyCheckStatusUnhealthy DependencyCheckStatus = "unhealthy"
	DependencyCheckStatusUnknown   DependencyCheckStatus = "unknown"
)

// Defines values for FormAnalysisLoginFormDetailsMethod.
const (
	FormAnalysisLoginFormDetailsMethodPOST FormAnalysisLoginFormDetailsMethod = "POST"
)

// Defines values for HealthResponseChecksStatus.
const (
	HealthResponseChecksStatusHealthy   HealthResponseChecksStatus = "healthy"
	HealthResponseChecksStatusUnhealthy HealthResponseChecksStatus = "unhealthy"
	HealthResponseChecksStatusUnknown   HealthResponseChecksStatus = "unknown"
)

// Defines values for HealthResponseChecksCacheStatus.
const (
	HealthResponseChecksCacheStatusHealthy   HealthResponseChecksCacheStatus = "healthy"
	HealthResponseChecksCacheStatusUnhealthy HealthResponseChecksCacheStatus = "unhealthy"
	HealthResponseChecksCacheStatusUnknown   HealthResponseChecksCacheStatus = "unknown"
)

// Defines values for HealthResponseChecksQueueStatus.
const (
	HealthResponseChecksQueueStatusHealthy   HealthResponseChecksQueueStatus = "healthy"
	HealthResponseChecksQueueStatusUnhealthy HealthResponseChecksQueueStatus = "unhealthy"
	HealthResponseChecksQueueStatusUnknown   HealthResponseChecksQueueStatus = "unknown"
)

// Defines values for HealthResponseChecksStorageStatus.
const (
	HealthResponseChecksStorageStatusHealthy   HealthResponseChecksStorageStatus = "healthy"
	HealthResponseChecksStorageStatusUnhealthy HealthResponseChecksStorageStatus = "unhealthy"
	HealthResponseChecksStorageStatusUnknown   HealthResponseChecksStorageStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDOWN        HealthResponseStatus = "DOWN"
	HealthResponseStatusMAINTENANCE HealthResponseStatus = "MAINTENANCE"
	HealthResponseStatusOK          HealthResponseStatus = "OK"
)

// Defines values for LivenessResponseStatus.
const (
	LivenessResponseStatusDOWN        LivenessResponseStatus = "DOWN"
	LivenessResponseStatusMAINTENANCE LivenessResponseStatus = "MAINTENANCE"
	LivenessResponseStatusOK          LivenessResponseStatus = "OK"
)

// Defines values for LoginFormMethod.
const (
	LoginFormMethodPOST LoginFormMethod = "POST"
)

// Defines values for ReadinessResponseChecksStatus.
const (
	ReadinessResponseChecksStatusHealthy   ReadinessResponseChecksStatus = "healthy"
	ReadinessResponseChecksStatusUnhealthy ReadinessResponseChecksStatus = "unhealthy"
	ReadinessResponseChecksStatusUnknown   ReadinessResponseChecksStatus = "unknown"
)

// Defines values for ReadinessResponseChecksCacheStatus.
const (
	ReadinessResponseChecksCacheStatusHealthy   ReadinessResponseChecksCacheStatus = "healthy"
	ReadinessResponseChecksCacheStatusUnhealthy ReadinessResponseChecksCacheStatus = "unhealthy"
	ReadinessResponseChecksCacheStatusUnknown   ReadinessResponseChecksCacheStatus = "unknown"
)

// Defines values for ReadinessResponseChecksQueueStatus.
const (
	ReadinessResponseChecksQueueStatusHealthy   ReadinessResponseChecksQueueStatus = "healthy"
	ReadinessResponseChecksQueueStatusUnhealthy ReadinessResponseChecksQueueStatus = "unhealthy"
	ReadinessResponseChecksQueueStatusUnknown   ReadinessResponseChecksQueueStatus = "unknown"
)

// Defines values for ReadinessResponseChecksStorageStatus.
const (
	ReadinessResponseChecksStorageStatusHealthy   ReadinessResponseChecksStorageStatus = "healthy"
	ReadinessResponseChecksStorageStatusUnhealthy ReadinessResponseChecksStorageStatus = "unhealthy"
	ReadinessResponseChecksStorageStatusUnknown   ReadinessResponseChecksStorageStatus = "unknown"
)

// Defines values for ReadinessResponseStatus.
const (
	DOWN        ReadinessResponseStatus = "DOWN"
	MAINTENANCE ReadinessResponseStatus = "MAINTENANCE"
	OK          ReadinessResponseStatus = "OK"
)

// Defines values for HealthResponseV1DependencyCheckStatus.
const (
	Healthy   HealthResponseV1DependencyCheckStatus = "healthy"
	Unhealthy HealthResponseV1DependencyCheckStatus = "unhealthy"
	Unknown   HealthResponseV1DependencyCheckStatus = "unknown"
)

// Defines values for ApiVersionHeader.
const (
	ApiVersionHeaderV1 ApiVersionHeader = "v1"
)

// Defines values for GetAnalysisParamsAPIVersion.
const (
	GetAnalysisParamsAPIVersionV1 GetAnalysisParamsAPIVersion = "v1"
)

// Defines values for GetAnalysisEventsParamsAPIVersion.
const (
	GetAnalysisEventsParamsAPIVersionV1 GetAnalysisEventsParamsAPIVersion = "v1"
)

// Defines values for AnalyzeURLParamsAPIVersion.
const (
	AnalyzeURLParamsAPIVersionV1 AnalyzeURLParamsAPIVersion = "v1"
)

// AnalysisData defines model for AnalysisData.
type AnalysisData struct {
	Forms *struct {
		LoginFormDetails *[]struct {
			// Action Form action URL
			Action *string `json:"action,omitempty"`

			// Fields Form field names
			Fields *[]string `json:"fields,omitempty"`

			// Method Form submission method
			Method *AnalysisDataFormsLoginFormDetailsMethod `json:"method,omitempty"`
		} `json:"login_form_details,omitempty"`

		// LoginFormsDetected Number of login forms detected
		LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

		// TotalCount Total number of forms found
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"forms,omitempty"`
	HeadingCounts *struct {
		H1 *int `json:"h1,omitempty"`
		H2 *int `json:"h2,omitempty"`
		H3 *int `json:"h3,omitempty"`
		H4 *int `json:"h4,omitempty"`
		H5 *int `json:"h5,omitempty"`
		H6 *int `json:"h6,omitempty"`
	} `json:"heading_counts,omitempty"`

	// HtmlVersion Detected HTML version
	HtmlVersion *string `json:"html_version,omitempty"`
	Links       *struct {
		// ExternalCount Number of external links
		ExternalCount     *int `json:"external_count,omitempty"`
		InaccessibleLinks *[]struct {
			// Error Error description
			Error *string `json:"error,omitempty"`

			// StatusCode HTTP status code received
			StatusCode *int    `json:"status_code,omitempty"`
			Url        *string `json:"url,omitempty"`
		} `json:"inaccessible_links,omitempty"`

		// InternalCount Number of internal links
		InternalCount *int `json:"internal_count,omitempty"`

		// TotalCount Total number of links
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"links,omitempty"`

	// Title Page title
	Title *string `json:"title,omitempty"`
}

// AnalysisDataFormsLoginFormDetailsMethod Form submission method
type AnalysisDataFormsLoginFormDetailsMethod string

// AnalysisError defines model for AnalysisError.
type AnalysisError struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type
	Error *string `json:"error,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// HttpStatusCode HTTP status code from the target URL (if applicable)
	HttpStatusCode *int                 `json:"http_status_code,omitempty"`
	Status         *AnalysisErrorStatus `json:"status,omitempty"`
}

// AnalysisErrorStatus defines model for AnalysisError.Status.
type AnalysisErrorStatus string

// AnalysisInProgress defines model for AnalysisInProgress.
type AnalysisInProgress struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CurrentStep Current analysis step
	CurrentStep *string `json:"current_step,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Progress Progress percentage
	Progress *int                      `json:"progress,omitempty"`
	Status   *AnalysisInProgressStatus `json:"status,omitempty"`
}

// AnalysisInProgressStatus defines model for AnalysisInProgress.Status.
type AnalysisInProgressStatus string

// AnalysisResponse defines model for AnalysisResponse.
type AnalysisResponse struct {
	// AnalysisId Unique identifier for the analysis
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CreatedAt When the analysis was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Status Current status of the analysis
	Status *AnalysisResponseStatus `json:"status,omitempty"`

	// Url The URL being analyzed
	Url *string `json:"url,omitempty"`
}

// AnalysisResponseStatus Current status of the analysis
type AnalysisResponseStatus string

// AnalysisResult defines model for AnalysisResult.
type AnalysisResult struct {
	AnalysisId  *openapi_types.UUID `json:"analysis_id,omitempty"`
	CompletedAt *time.Time          `json:"completed_at,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`

	// Duration Analysis duration
	Duration *string `json:"duration,omitempty"`
	Results  *struct {
		Forms *struct {
			LoginFormDetails *[]struct {
				// Action Form action URL
				Action *string `json:"action,omitempty"`

				// Fields Form field names
				Fields *[]string `json:"fields,omitempty"`

				// Method Form submission method
				Method *AnalysisResultResultsFormsLoginFormDetailsMethod `json:"method,omitempty"`
			} `json:"login_form_details,omitempty"`

			// LoginFormsDetected Number of login forms detected
			LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

			// TotalCount Total number of forms found
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"forms,omitempty"`
		HeadingCounts *struct {
			H1 *int `json:"h1,omitempty"`
			H2 *int `json:"h2,omitempty"`
			H3 *int `json:"h3,omitempty"`
			H4 *int `json:"h4,omitempty"`
			H5 *int `json:"h5,omitempty"`
			H6 *int `json:"h6,omitempty"`
		} `json:"heading_counts,omitempty"`

		// HtmlVersion Detected HTML version
		HtmlVersion *string `json:"html_version,omitempty"`
		Links       *struct {
			// ExternalCount Number of external links
			ExternalCount     *int `json:"external_count,omitempty"`
			InaccessibleLinks *[]struct {
				// Error Error description
				Error *string `json:"error,omitempty"`

				// StatusCode HTTP status code received
				StatusCode *int    `json:"status_code,omitempty"`
				Url        *string `json:"url,omitempty"`
			} `json:"inaccessible_links,omitempty"`

			// InternalCount Number of internal links
			InternalCount *int `json:"internal_count,omitempty"`

			// TotalCount Total number of links
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"links,omitempty"`

		// Title Page title
		Title *string `json:"title,omitempty"`
	} `json:"results,omitempty"`
	Status *AnalysisResultStatus `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// AnalysisResultResultsFormsLoginFormDetailsMethod Form submission method
type AnalysisResultResultsFormsLoginFormDetailsMethod string

// AnalysisResultStatus defines model for AnalysisResult.Status.
type AnalysisResultStatus string

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// CacheDependencyCheck defines model for CacheDependencyCheck.
type CacheDependencyCheck struct {
	Details *CacheDependencyCheck_Details `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status CacheDependencyCheckStatus `json:"status"`
}

// CacheDependencyCheck_Details defines model for CacheDependencyCheck.Details.
type CacheDependencyCheck_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CacheDependencyCheckStatus Health status of the dependency
type CacheDependencyCheckStatus string

// DependencyCheck defines model for DependencyCheck.
type DependencyCheck struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status DependencyCheckStatus `json:"status"`
}

// DependencyCheckStatus Health status of the dependency
type DependencyCheckStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// FormAnalysis defines model for FormAnalysis.
type FormAnalysis struct {
	LoginFormDetails *[]struct {
		// Action Form action URL
		Action *string `json:"action,omitempty"`

		// Fields Form field names
		Fields *[]string `json:"fields,omitempty"`

		// Method Form submission method
		Method *FormAnalysisLoginFormDetailsMethod `json:"method,omitempty"`
	} `json:"login_form_details,omitempty"`

	// LoginFormsDetected Number of login forms detected
	LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

	// TotalCount Total number of forms found
	TotalCount *int `json:"total_count,omitempty"`
}

// FormAnalysisLoginFormDetailsMethod Form submission method
type FormAnalysisLoginFormDetailsMethod string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Checks Status of individual dependencies
	Checks HealthResponse_Checks `json:"checks"`

	// Status Overall health status - OK only if all dependencies are healthy
	Status HealthResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseChecksStatus Health status of the dependency
type HealthResponseChecksStatus string

// HealthResponse_Checks_Cache_Details defines model for HealthResponse.Checks.Cache.Details.
type HealthResponse_Checks_Cache_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HealthResponseChecksCacheStatus Health status of the dependency
type HealthResponseChecksCacheStatus string

// HealthResponseChecksQueueStatus Health status of the dependency
type HealthResponseChecksQueueStatus string

// HealthResponseChecksStorageStatus Health status of the dependency
type HealthResponseChecksStorageStatus string

// HealthResponse_Checks Status of individual dependencies
type HealthResponse_Checks struct {
	Cache *struct {
		Details *HealthResponse_Checks_Cache_Details `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// HealthResponseStatus Overall health status - OK only if all dependencies are healthy
type HealthResponseStatus string

// InaccessibleLink defines model for InaccessibleLink.
type InaccessibleLink struct {
	// Error Error description
	Error *string `json:"error,omitempty"`

	// StatusCode HTTP status code received
	StatusCode *int    `json:"status_code,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// LinkAnalysis defines model for LinkAnalysis.
type LinkAnalysis struct {
	// ExternalCount Number of external links
	ExternalCount     *int `json:"external_count,omitempty"`
	InaccessibleLinks *[]struct {
		// Error Error description
		Error *string `json:"error,omitempty"`

		// StatusCode HTTP status code received
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"inaccessible_links,omitempty"`

	// InternalCount Number of internal links
	InternalCount *int `json:"internal_count,omitempty"`

	// TotalCount Total number of links
	TotalCount *int `json:"total_count,omitempty"`
}

// LivenessResponse defines model for LivenessResponse.
type LivenessResponse struct {
	// Status Service liveness status
	Status LivenessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version API version
	Version string `json:"version"`
}

// LivenessResponseStatus Service liveness status
type LivenessResponseStatus string

// LoginForm defines model for LoginForm.
type LoginForm struct {
	// Action Form action URL
	Action *string `json:"action,omitempty"`

	// Fields Form field names
	Fields *[]string `json:"fields,omitempty"`

	// Method Form submission method
	Method *LoginFormMethod `json:"method,omitempty"`
}

// LoginFormMethod Form submission method
type LoginFormMethod string

// Pagination defines model for Pagination.
type Pagination struct {
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
	Limit       *int  `json:"limit,omitempty"`
	Page        *int  `json:"page,omitempty"`
	TotalCount  *int  `json:"total_count,omitempty"`
	TotalPages  *int  `json:"total_pages,omitempty"`
}

// PoolStats defines model for PoolStats.
type PoolStats struct {
	// Hits Number of times free connection was found in the pool
	Hits int `json:"hits"`

	// IdleConnections Number of idle connections in the pool
	IdleConnections int `json:"idle_connections"`

	// Misses Number of times free connection was NOT found in the pool
	Misses int `json:"misses"`

	// StaleConnections Number of stale connections removed from the pool
	StaleConnections int `json:"stale_connections"`

	// Timeouts Number of times a wait timeout occurred
	Timeouts int `json:"timeouts"`

	// TotalConnections Number of total connections in the pool
	TotalConnections int `json:"total_connections"`

	// WaitCount Number of times a connection was waited
	WaitCount int `json:"wait_count"`

	// WaitDurationNs Total time spent for waiting a connection in nanoseconds
	WaitDurationNs int `json:"wait_duration_ns"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Checks Status of individual dependencies
	Checks ReadinessResponse_Checks `json:"checks"`

	// Status Overall readiness status - ready only if all dependencies are healthy
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// ReadinessResponseChecksStatus Health status of the dependency
type ReadinessResponseChecksStatus string

// ReadinessResponseChecksCacheStatus Health status of the dependency
type ReadinessResponseChecksCacheStatus string

// ReadinessResponseChecksQueueStatus Health status of the dependency
type ReadinessResponseChecksQueueStatus string

// ReadinessResponseChecksStorageStatus Health status of the dependency
type ReadinessResponseChecksStorageStatus string

// ReadinessResponse_Checks Status of individual dependencies
type ReadinessResponse_Checks struct {
	Cache *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// ReadinessResponseStatus Overall readiness status - ready only if all dependencies are healthy
type ReadinessResponseStatus string

// HealthResponseV1DependencyCheck defines model for health-response.v1_DependencyCheck.
type HealthResponseV1DependencyCheck struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseV1DependencyCheckStatus `json:"status"`
}

// HealthResponseV1DependencyCheckStatus Health status of the dependency
type HealthResponseV1DependencyCheckStatus string

// ApiVersionHeader defines model for ApiVersionHeader.
type ApiVersionHeader string

// BadRequest defines model for bad_request.
type BadRequest struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// NotFound defines model for not_found.
type NotFound struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// RateLimit defines model for rate_limit.
type RateLimit struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// ServerError defines model for server_error.
type ServerError struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// GetAnalysisParams defines parameters for GetAnalysis.
type GetAnalysisParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisParamsAPIVersion defines parameters for GetAnalysis.
type GetAnalysisParamsAPIVersion string

// GetAnalysisEventsParams defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisEventsParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisEventsParamsAPIVersion defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParamsAPIVersion string

// AnalyzeURLJSONBody defines parameters for AnalyzeURL.
type AnalyzeURLJSONBody struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// AnalyzeURLParams defines parameters for AnalyzeURL.
type AnalyzeURLParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *AnalyzeURLParamsAPIVersion `json:"API-Version,omitempty"`
}

// AnalyzeURLParamsAPIVersion defines parameters for AnalyzeURL.
type AnalyzeURLParamsAPIVersion string

// AnalyzeURLJSONRequestBody defines body for AnalyzeURL for application/json ContentType.
type AnalyzeURLJSONRequestBody AnalyzeURLJSONBody

// Getter for additional properties for CacheDependencyCheck_Details. Returns the specified
// element and whether it was found
func (a CacheDependencyCheck_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CacheDependencyCheck_Details
func (a *CacheDependencyCheck_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a *CacheDependencyCheck_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a CacheDependencyCheck_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks_Cache_Details. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks_Cache_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks_Cache_Details
func (a *HealthResponse_Checks_Cache_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a *HealthResponse_Checks_Cache_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a HealthResponse_Checks_Cache_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks) Get(fieldName string) (value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks
func (a *HealthResponse_Checks) Set(fieldName string, value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a *HealthResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Details Additional dependency-specific information
				Details *map[string]interface{} `json:"details,omitempty"`

				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// ResponseTime Response time in milliseconds
				ResponseTime *float32 `json:"response_time,omitempty"`

				// Status Health status of the dependency
				Status HealthResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a HealthResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReadinessResponse_Checks. Returns the specified
// element and whether it was found
func (a ReadinessResponse_Checks) Get(fieldName string) (value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReadinessResponse_Checks
func (a *ReadinessResponse_Checks) Set(fieldName string, value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a *ReadinessResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// Status Health status of the dependency
				Status ReadinessResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a ReadinessResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get analysis result
	// (GET /v1/analysis/{analysisId})
	GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams)
	// Get real-time analysis progress
	// (GET /v1/analysis/{analysisId}/events)
	GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams)
	// Analyze a web page
	// (POST /v1/analyze)
	AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams)
	// Health check
	// (GET /v1/health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Liveness probe
	// (GET /v1/liveness)
	LivenessCheck(w http.ResponseWriter, r *http.Request)
	// Readiness probe
	// (GET /v1/readiness)
	ReadinessCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get analysis result
// (GET /v1/analysis/{analysisId})
func (_ Unimplemented) GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time analysis progress
// (GET /v1/analysis/{analysisId}/events)
func (_ Unimplemented) GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Analyze a web page
// (POST /v1/analyze)
func (_ Unimplemented) AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /v1/health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Liveness probe
// (GET /v1/liveness)
func (_ Unimplemented) LivenessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness probe
// (GET /v1/readiness)
func (_ Unimplemented) ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnalysis operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysis(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysis(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalysisEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysisEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisEventsParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisEventsParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysisEvents(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AnalyzeURL operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeURL(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeURLParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion AnalyzeURLParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeURL(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LivenessCheck operation middleware
func (siw *ServerInterfaceWrapper) LivenessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LivenessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadinessCheck operation middleware
func (siw *ServerInterfaceWrapper) ReadinessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadinessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}", wrapper.GetAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}/events", wrapper.GetAnalysisEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/analyze", wrapper.AnalyzeURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/liveness", wrapper.LivenessCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/readiness", wrapper.ReadinessCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
