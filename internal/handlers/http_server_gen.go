// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes       = "BasicAuth.Scopes"
	PasetoAuthScopes      = "PasetoAuth.Scopes"
	PasetoQueryAuthScopes = "PasetoQueryAuth.Scopes"
)

// Defines values for AnalysisDataFormsLoginFormDetailsMethod.
const (
	AnalysisDataFormsLoginFormDetailsMethodPOST AnalysisDataFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisErrorStatus.
const (
	AnalysisErrorStatusFailed AnalysisErrorStatus = "failed"
)

// Defines values for AnalysisInProgressStatus.
const (
	InProgress AnalysisInProgressStatus = "in_progress"
)

// Defines values for AnalysisResponseStatus.
const (
	AnalysisResponseStatusCompleted  AnalysisResponseStatus = "completed"
	AnalysisResponseStatusFailed     AnalysisResponseStatus = "failed"
	AnalysisResponseStatusInProgress AnalysisResponseStatus = "in_progress"
	AnalysisResponseStatusRequested  AnalysisResponseStatus = "requested"
)

// Defines values for AnalysisResultResultsFormsLoginFormDetailsMethod.
const (
	AnalysisResultResultsFormsLoginFormDetailsMethodPOST AnalysisResultResultsFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisResultStatus.
const (
	Completed AnalysisResultStatus = "completed"
)

// Defines values for CacheDependencyCheckStatus.
const (
	CacheDependencyCheckStatusHealthy   CacheDependencyCheckStatus = "healthy"
	CacheDependencyCheckStatusUnhealthy CacheDependencyCheckStatus = "unhealthy"
	CacheDependencyCheckStatusUnknown   CacheDependencyCheckStatus = "unknown"
)

// Defines values for DependencyCheckStatus.
const (
	DependencyCheckStatusHealthy   DependencyCheckStatus = "healthy"
	DependencyCheckStatusUnhealthy DependencyCheckStatus = "unhealthy"
	DependencyCheckStatusUnknown   DependencyCheckStatus = "unknown"
)

// Defines values for FormAnalysisLoginFormDetailsMethod.
const (
	FormAnalysisLoginFormDetailsMethodPOST FormAnalysisLoginFormDetailsMethod = "POST"
)

// Defines values for HealthResponseChecksStatus.
const (
	HealthResponseChecksStatusHealthy   HealthResponseChecksStatus = "healthy"
	HealthResponseChecksStatusUnhealthy HealthResponseChecksStatus = "unhealthy"
	HealthResponseChecksStatusUnknown   HealthResponseChecksStatus = "unknown"
)

// Defines values for HealthResponseChecksCacheStatus.
const (
	HealthResponseChecksCacheStatusHealthy   HealthResponseChecksCacheStatus = "healthy"
	HealthResponseChecksCacheStatusUnhealthy HealthResponseChecksCacheStatus = "unhealthy"
	HealthResponseChecksCacheStatusUnknown   HealthResponseChecksCacheStatus = "unknown"
)

// Defines values for HealthResponseChecksQueueStatus.
const (
	HealthResponseChecksQueueStatusHealthy   HealthResponseChecksQueueStatus = "healthy"
	HealthResponseChecksQueueStatusUnhealthy HealthResponseChecksQueueStatus = "unhealthy"
	HealthResponseChecksQueueStatusUnknown   HealthResponseChecksQueueStatus = "unknown"
)

// Defines values for HealthResponseChecksStorageStatus.
const (
	HealthResponseChecksStorageStatusHealthy   HealthResponseChecksStorageStatus = "healthy"
	HealthResponseChecksStorageStatusUnhealthy HealthResponseChecksStorageStatus = "unhealthy"
	HealthResponseChecksStorageStatusUnknown   HealthResponseChecksStorageStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDOWN        HealthResponseStatus = "DOWN"
	HealthResponseStatusMAINTENANCE HealthResponseStatus = "MAINTENANCE"
	HealthResponseStatusOK          HealthResponseStatus = "OK"
)

// Defines values for LivenessResponseStatus.
const (
	LivenessResponseStatusDOWN        LivenessResponseStatus = "DOWN"
	LivenessResponseStatusMAINTENANCE LivenessResponseStatus = "MAINTENANCE"
	LivenessResponseStatusOK          LivenessResponseStatus = "OK"
)

// Defines values for LoginFormMethod.
const (
	LoginFormMethodPOST LoginFormMethod = "POST"
)

// Defines values for ReadinessResponseChecksStatus.
const (
	ReadinessResponseChecksStatusHealthy   ReadinessResponseChecksStatus = "healthy"
	ReadinessResponseChecksStatusUnhealthy ReadinessResponseChecksStatus = "unhealthy"
	ReadinessResponseChecksStatusUnknown   ReadinessResponseChecksStatus = "unknown"
)

// Defines values for ReadinessResponseChecksCacheStatus.
const (
	ReadinessResponseChecksCacheStatusHealthy   ReadinessResponseChecksCacheStatus = "healthy"
	ReadinessResponseChecksCacheStatusUnhealthy ReadinessResponseChecksCacheStatus = "unhealthy"
	ReadinessResponseChecksCacheStatusUnknown   ReadinessResponseChecksCacheStatus = "unknown"
)

// Defines values for ReadinessResponseChecksQueueStatus.
const (
	ReadinessResponseChecksQueueStatusHealthy   ReadinessResponseChecksQueueStatus = "healthy"
	ReadinessResponseChecksQueueStatusUnhealthy ReadinessResponseChecksQueueStatus = "unhealthy"
	ReadinessResponseChecksQueueStatusUnknown   ReadinessResponseChecksQueueStatus = "unknown"
)

// Defines values for ReadinessResponseChecksStorageStatus.
const (
	ReadinessResponseChecksStorageStatusHealthy   ReadinessResponseChecksStorageStatus = "healthy"
	ReadinessResponseChecksStorageStatusUnhealthy ReadinessResponseChecksStorageStatus = "unhealthy"
	ReadinessResponseChecksStorageStatusUnknown   ReadinessResponseChecksStorageStatus = "unknown"
)

// Defines values for ReadinessResponseStatus.
const (
	DOWN        ReadinessResponseStatus = "DOWN"
	MAINTENANCE ReadinessResponseStatus = "MAINTENANCE"
	OK          ReadinessResponseStatus = "OK"
)

// Defines values for HealthResponseV1DependencyCheckStatus.
const (
	Healthy   HealthResponseV1DependencyCheckStatus = "healthy"
	Unhealthy HealthResponseV1DependencyCheckStatus = "unhealthy"
	Unknown   HealthResponseV1DependencyCheckStatus = "unknown"
)

// Defines values for ApiVersionHeader.
const (
	ApiVersionHeaderV1 ApiVersionHeader = "v1"
)

// Defines values for GetAnalysisParamsAPIVersion.
const (
	GetAnalysisParamsAPIVersionV1 GetAnalysisParamsAPIVersion = "v1"
)

// Defines values for GetAnalysisEventsParamsAPIVersion.
const (
	GetAnalysisEventsParamsAPIVersionV1 GetAnalysisEventsParamsAPIVersion = "v1"
)

// Defines values for AnalyzeURLParamsAPIVersion.
const (
	AnalyzeURLParamsAPIVersionV1 AnalyzeURLParamsAPIVersion = "v1"
)

// AnalysisData defines model for AnalysisData.
type AnalysisData struct {
	Forms *struct {
		LoginFormDetails *[]struct {
			// Action Form action URL
			Action *string `json:"action,omitempty"`

			// Fields Form field names
			Fields *[]string `json:"fields,omitempty"`

			// Method Form submission method
			Method *AnalysisDataFormsLoginFormDetailsMethod `json:"method,omitempty"`
		} `json:"login_form_details,omitempty"`

		// LoginFormsDetected Number of login forms detected
		LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

		// TotalCount Total number of forms found
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"forms,omitempty"`
	HeadingCounts *struct {
		H1 *int `json:"h1,omitempty"`
		H2 *int `json:"h2,omitempty"`
		H3 *int `json:"h3,omitempty"`
		H4 *int `json:"h4,omitempty"`
		H5 *int `json:"h5,omitempty"`
		H6 *int `json:"h6,omitempty"`
	} `json:"heading_counts,omitempty"`

	// HtmlVersion Detected HTML version
	HtmlVersion *string `json:"html_version,omitempty"`
	Links       *struct {
		// ExternalCount Number of external links
		ExternalCount     *int `json:"external_count,omitempty"`
		InaccessibleLinks *[]struct {
			// Error Error description
			Error *string `json:"error,omitempty"`

			// StatusCode HTTP status code received
			StatusCode *int    `json:"status_code,omitempty"`
			Url        *string `json:"url,omitempty"`
		} `json:"inaccessible_links,omitempty"`

		// InternalCount Number of internal links
		InternalCount *int `json:"internal_count,omitempty"`

		// TotalCount Total number of links
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"links,omitempty"`

	// Title Page title
	Title *string `json:"title,omitempty"`
}

// AnalysisDataFormsLoginFormDetailsMethod Form submission method
type AnalysisDataFormsLoginFormDetailsMethod string

// AnalysisError defines model for AnalysisError.
type AnalysisError struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type
	Error *string `json:"error,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// HttpStatusCode HTTP status code from the target URL (if applicable)
	HttpStatusCode *int                 `json:"http_status_code,omitempty"`
	Status         *AnalysisErrorStatus `json:"status,omitempty"`
}

// AnalysisErrorStatus defines model for AnalysisError.Status.
type AnalysisErrorStatus string

// AnalysisInProgress defines model for AnalysisInProgress.
type AnalysisInProgress struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CurrentStep Current analysis step
	CurrentStep *string `json:"current_step,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Progress Progress percentage
	Progress *int                      `json:"progress,omitempty"`
	Status   *AnalysisInProgressStatus `json:"status,omitempty"`
}

// AnalysisInProgressStatus defines model for AnalysisInProgress.Status.
type AnalysisInProgressStatus string

// AnalysisResponse defines model for AnalysisResponse.
type AnalysisResponse struct {
	// AnalysisId Unique identifier for the analysis
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CreatedAt When the analysis was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Status Current status of the analysis
	Status *AnalysisResponseStatus `json:"status,omitempty"`

	// Url The URL being analyzed
	Url *string `json:"url,omitempty"`
}

// AnalysisResponseStatus Current status of the analysis
type AnalysisResponseStatus string

// AnalysisResult defines model for AnalysisResult.
type AnalysisResult struct {
	AnalysisId  *openapi_types.UUID `json:"analysis_id,omitempty"`
	CompletedAt *time.Time          `json:"completed_at,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`

	// Duration Analysis duration
	Duration *string `json:"duration,omitempty"`
	Results  *struct {
		Forms *struct {
			LoginFormDetails *[]struct {
				// Action Form action URL
				Action *string `json:"action,omitempty"`

				// Fields Form field names
				Fields *[]string `json:"fields,omitempty"`

				// Method Form submission method
				Method *AnalysisResultResultsFormsLoginFormDetailsMethod `json:"method,omitempty"`
			} `json:"login_form_details,omitempty"`

			// LoginFormsDetected Number of login forms detected
			LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

			// TotalCount Total number of forms found
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"forms,omitempty"`
		HeadingCounts *struct {
			H1 *int `json:"h1,omitempty"`
			H2 *int `json:"h2,omitempty"`
			H3 *int `json:"h3,omitempty"`
			H4 *int `json:"h4,omitempty"`
			H5 *int `json:"h5,omitempty"`
			H6 *int `json:"h6,omitempty"`
		} `json:"heading_counts,omitempty"`

		// HtmlVersion Detected HTML version
		HtmlVersion *string `json:"html_version,omitempty"`
		Links       *struct {
			// ExternalCount Number of external links
			ExternalCount     *int `json:"external_count,omitempty"`
			InaccessibleLinks *[]struct {
				// Error Error description
				Error *string `json:"error,omitempty"`

				// StatusCode HTTP status code received
				StatusCode *int    `json:"status_code,omitempty"`
				Url        *string `json:"url,omitempty"`
			} `json:"inaccessible_links,omitempty"`

			// InternalCount Number of internal links
			InternalCount *int `json:"internal_count,omitempty"`

			// TotalCount Total number of links
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"links,omitempty"`

		// Title Page title
		Title *string `json:"title,omitempty"`
	} `json:"results,omitempty"`
	Status *AnalysisResultStatus `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// AnalysisResultResultsFormsLoginFormDetailsMethod Form submission method
type AnalysisResultResultsFormsLoginFormDetailsMethod string

// AnalysisResultStatus defines model for AnalysisResult.Status.
type AnalysisResultStatus string

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// CacheDependencyCheck defines model for CacheDependencyCheck.
type CacheDependencyCheck struct {
	Details *CacheDependencyCheck_Details `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status CacheDependencyCheckStatus `json:"status"`
}

// CacheDependencyCheck_Details defines model for CacheDependencyCheck.Details.
type CacheDependencyCheck_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CacheDependencyCheckStatus Health status of the dependency
type CacheDependencyCheckStatus string

// DependencyCheck defines model for DependencyCheck.
type DependencyCheck struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status DependencyCheckStatus `json:"status"`
}

// DependencyCheckStatus Health status of the dependency
type DependencyCheckStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// FormAnalysis defines model for FormAnalysis.
type FormAnalysis struct {
	LoginFormDetails *[]struct {
		// Action Form action URL
		Action *string `json:"action,omitempty"`

		// Fields Form field names
		Fields *[]string `json:"fields,omitempty"`

		// Method Form submission method
		Method *FormAnalysisLoginFormDetailsMethod `json:"method,omitempty"`
	} `json:"login_form_details,omitempty"`

	// LoginFormsDetected Number of login forms detected
	LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

	// TotalCount Total number of forms found
	TotalCount *int `json:"total_count,omitempty"`
}

// FormAnalysisLoginFormDetailsMethod Form submission method
type FormAnalysisLoginFormDetailsMethod string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Checks Status of individual dependencies
	Checks HealthResponse_Checks `json:"checks"`

	// Status Overall health status - OK only if all dependencies are healthy
	Status HealthResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseChecksStatus Health status of the dependency
type HealthResponseChecksStatus string

// HealthResponse_Checks_Cache_Details defines model for HealthResponse.Checks.Cache.Details.
type HealthResponse_Checks_Cache_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HealthResponseChecksCacheStatus Health status of the dependency
type HealthResponseChecksCacheStatus string

// HealthResponseChecksQueueStatus Health status of the dependency
type HealthResponseChecksQueueStatus string

// HealthResponseChecksStorageStatus Health status of the dependency
type HealthResponseChecksStorageStatus string

// HealthResponse_Checks Status of individual dependencies
type HealthResponse_Checks struct {
	Cache *struct {
		Details *HealthResponse_Checks_Cache_Details `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// HealthResponseStatus Overall health status - OK only if all dependencies are healthy
type HealthResponseStatus string

// InaccessibleLink defines model for InaccessibleLink.
type InaccessibleLink struct {
	// Error Error description
	Error *string `json:"error,omitempty"`

	// StatusCode HTTP status code received
	StatusCode *int    `json:"status_code,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// LinkAnalysis defines model for LinkAnalysis.
type LinkAnalysis struct {
	// ExternalCount Number of external links
	ExternalCount     *int `json:"external_count,omitempty"`
	InaccessibleLinks *[]struct {
		// Error Error description
		Error *string `json:"error,omitempty"`

		// StatusCode HTTP status code received
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"inaccessible_links,omitempty"`

	// InternalCount Number of internal links
	InternalCount *int `json:"internal_count,omitempty"`

	// TotalCount Total number of links
	TotalCount *int `json:"total_count,omitempty"`
}

// LivenessResponse defines model for LivenessResponse.
type LivenessResponse struct {
	// Status Service liveness status
	Status LivenessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version API version
	Version string `json:"version"`
}

// LivenessResponseStatus Service liveness status
type LivenessResponseStatus string

// LoginForm defines model for LoginForm.
type LoginForm struct {
	// Action Form action URL
	Action *string `json:"action,omitempty"`

	// Fields Form field names
	Fields *[]string `json:"fields,omitempty"`

	// Method Form submission method
	Method *LoginFormMethod `json:"method,omitempty"`
}

// LoginFormMethod Form submission method
type LoginFormMethod string

// Pagination defines model for Pagination.
type Pagination struct {
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
	Limit       *int  `json:"limit,omitempty"`
	Page        *int  `json:"page,omitempty"`
	TotalCount  *int  `json:"total_count,omitempty"`
	TotalPages  *int  `json:"total_pages,omitempty"`
}

// PoolStats defines model for PoolStats.
type PoolStats struct {
	// Hits Number of times free connection was found in the pool
	Hits int `json:"hits"`

	// IdleConnections Number of idle connections in the pool
	IdleConnections int `json:"idle_connections"`

	// Misses Number of times free connection was NOT found in the pool
	Misses int `json:"misses"`

	// StaleConnections Number of stale connections removed from the pool
	StaleConnections int `json:"stale_connections"`

	// Timeouts Number of times a wait timeout occurred
	Timeouts int `json:"timeouts"`

	// TotalConnections Number of total connections in the pool
	TotalConnections int `json:"total_connections"`

	// WaitCount Number of times a connection was waited
	WaitCount int `json:"wait_count"`

	// WaitDurationNs Total time spent for waiting a connection in nanoseconds
	WaitDurationNs int `json:"wait_duration_ns"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Checks Status of individual dependencies
	Checks ReadinessResponse_Checks `json:"checks"`

	// Status Overall readiness status - ready only if all dependencies are healthy
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// ReadinessResponseChecksStatus Health status of the dependency
type ReadinessResponseChecksStatus string

// ReadinessResponseChecksCacheStatus Health status of the dependency
type ReadinessResponseChecksCacheStatus string

// ReadinessResponseChecksQueueStatus Health status of the dependency
type ReadinessResponseChecksQueueStatus string

// ReadinessResponseChecksStorageStatus Health status of the dependency
type ReadinessResponseChecksStorageStatus string

// ReadinessResponse_Checks Status of individual dependencies
type ReadinessResponse_Checks struct {
	Cache *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// ReadinessResponseStatus Overall readiness status - ready only if all dependencies are healthy
type ReadinessResponseStatus string

// HealthResponseV1DependencyCheck defines model for health-response.v1_DependencyCheck.
type HealthResponseV1DependencyCheck struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseV1DependencyCheckStatus `json:"status"`
}

// HealthResponseV1DependencyCheckStatus Health status of the dependency
type HealthResponseV1DependencyCheckStatus string

// ApiVersionHeader defines model for ApiVersionHeader.
type ApiVersionHeader string

// BadRequest defines model for bad_request.
type BadRequest struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// NotFound defines model for not_found.
type NotFound struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// RateLimit defines model for rate_limit.
type RateLimit struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// ServerError defines model for server_error.
type ServerError struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// GetAnalysisParams defines parameters for GetAnalysis.
type GetAnalysisParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisParamsAPIVersion defines parameters for GetAnalysis.
type GetAnalysisParamsAPIVersion string

// GetAnalysisEventsParams defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParams struct {
	// Token PASETO authentication token for SSE connection
	Token string `form:"token" json:"token"`

	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisEventsParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisEventsParamsAPIVersion defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParamsAPIVersion string

// AnalyzeURLJSONBody defines parameters for AnalyzeURL.
type AnalyzeURLJSONBody struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// AnalyzeURLParams defines parameters for AnalyzeURL.
type AnalyzeURLParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *AnalyzeURLParamsAPIVersion `json:"API-Version,omitempty"`
}

// AnalyzeURLParamsAPIVersion defines parameters for AnalyzeURL.
type AnalyzeURLParamsAPIVersion string

// AnalyzeURLJSONRequestBody defines body for AnalyzeURL for application/json ContentType.
type AnalyzeURLJSONRequestBody AnalyzeURLJSONBody

// Getter for additional properties for CacheDependencyCheck_Details. Returns the specified
// element and whether it was found
func (a CacheDependencyCheck_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CacheDependencyCheck_Details
func (a *CacheDependencyCheck_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a *CacheDependencyCheck_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a CacheDependencyCheck_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks_Cache_Details. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks_Cache_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks_Cache_Details
func (a *HealthResponse_Checks_Cache_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a *HealthResponse_Checks_Cache_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a HealthResponse_Checks_Cache_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks) Get(fieldName string) (value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks
func (a *HealthResponse_Checks) Set(fieldName string, value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a *HealthResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Details Additional dependency-specific information
				Details *map[string]interface{} `json:"details,omitempty"`

				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// ResponseTime Response time in milliseconds
				ResponseTime *float32 `json:"response_time,omitempty"`

				// Status Health status of the dependency
				Status HealthResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a HealthResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReadinessResponse_Checks. Returns the specified
// element and whether it was found
func (a ReadinessResponse_Checks) Get(fieldName string) (value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReadinessResponse_Checks
func (a *ReadinessResponse_Checks) Set(fieldName string, value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a *ReadinessResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// Status Health status of the dependency
				Status ReadinessResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a ReadinessResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get analysis result
	// (GET /v1/analysis/{analysisId})
	GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams)
	// Get real-time analysis progress
	// (GET /v1/analysis/{analysisId}/events)
	GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams)
	// Analyze a web page
	// (POST /v1/analyze)
	AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams)
	// Health check
	// (GET /v1/health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Liveness probe
	// (GET /v1/liveness)
	LivenessCheck(w http.ResponseWriter, r *http.Request)
	// Readiness probe
	// (GET /v1/readiness)
	ReadinessCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get analysis result
// (GET /v1/analysis/{analysisId})
func (_ Unimplemented) GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time analysis progress
// (GET /v1/analysis/{analysisId}/events)
func (_ Unimplemented) GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Analyze a web page
// (POST /v1/analyze)
func (_ Unimplemented) AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /v1/health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Liveness probe
// (GET /v1/liveness)
func (_ Unimplemented) LivenessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness probe
// (GET /v1/readiness)
func (_ Unimplemented) ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnalysis operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysis(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysis(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalysisEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysisEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoQueryAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisEventsParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisEventsParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysisEvents(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AnalyzeURL operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeURL(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeURLParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion AnalyzeURLParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeURL(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LivenessCheck operation middleware
func (siw *ServerInterfaceWrapper) LivenessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LivenessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadinessCheck operation middleware
func (siw *ServerInterfaceWrapper) ReadinessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadinessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}", wrapper.GetAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}/events", wrapper.GetAnalysisEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/analyze", wrapper.AnalyzeURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/liveness", wrapper.LivenessCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/readiness", wrapper.ReadinessCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
