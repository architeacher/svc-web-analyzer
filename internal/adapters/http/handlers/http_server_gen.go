// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes       = "BasicAuth.Scopes"
	PasetoAuthScopes      = "PasetoAuth.Scopes"
	PasetoQueryAuthScopes = "PasetoQueryAuth.Scopes"
)

// Defines values for AnalysisDataFormsLoginFormDetailsMethod.
const (
	AnalysisDataFormsLoginFormDetailsMethodPOST AnalysisDataFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisErrorStatus.
const (
	AnalysisErrorStatusFailed AnalysisErrorStatus = "failed"
)

// Defines values for AnalysisInProgressStatus.
const (
	InProgress AnalysisInProgressStatus = "in_progress"
)

// Defines values for AnalysisResponseStatus.
const (
	AnalysisResponseStatusCompleted  AnalysisResponseStatus = "completed"
	AnalysisResponseStatusFailed     AnalysisResponseStatus = "failed"
	AnalysisResponseStatusInProgress AnalysisResponseStatus = "in_progress"
	AnalysisResponseStatusRequested  AnalysisResponseStatus = "requested"
)

// Defines values for AnalysisResultResultsFormsLoginFormDetailsMethod.
const (
	AnalysisResultResultsFormsLoginFormDetailsMethodPOST AnalysisResultResultsFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisResultStatus.
const (
	Completed AnalysisResultStatus = "completed"
)

// Defines values for CacheDependencyCheckStatus.
const (
	CacheDependencyCheckStatusHealthy   CacheDependencyCheckStatus = "healthy"
	CacheDependencyCheckStatusUnhealthy CacheDependencyCheckStatus = "unhealthy"
	CacheDependencyCheckStatusUnknown   CacheDependencyCheckStatus = "unknown"
)

// Defines values for DependencyCheckStatus.
const (
	DependencyCheckStatusHealthy   DependencyCheckStatus = "healthy"
	DependencyCheckStatusUnhealthy DependencyCheckStatus = "unhealthy"
	DependencyCheckStatusUnknown   DependencyCheckStatus = "unknown"
)

// Defines values for FormAnalysisLoginFormDetailsMethod.
const (
	FormAnalysisLoginFormDetailsMethodPOST FormAnalysisLoginFormDetailsMethod = "POST"
)

// Defines values for HealthResponseChecksStatus.
const (
	HealthResponseChecksStatusHealthy   HealthResponseChecksStatus = "healthy"
	HealthResponseChecksStatusUnhealthy HealthResponseChecksStatus = "unhealthy"
	HealthResponseChecksStatusUnknown   HealthResponseChecksStatus = "unknown"
)

// Defines values for HealthResponseChecksCacheStatus.
const (
	HealthResponseChecksCacheStatusHealthy   HealthResponseChecksCacheStatus = "healthy"
	HealthResponseChecksCacheStatusUnhealthy HealthResponseChecksCacheStatus = "unhealthy"
	HealthResponseChecksCacheStatusUnknown   HealthResponseChecksCacheStatus = "unknown"
)

// Defines values for HealthResponseChecksQueueStatus.
const (
	HealthResponseChecksQueueStatusHealthy   HealthResponseChecksQueueStatus = "healthy"
	HealthResponseChecksQueueStatusUnhealthy HealthResponseChecksQueueStatus = "unhealthy"
	HealthResponseChecksQueueStatusUnknown   HealthResponseChecksQueueStatus = "unknown"
)

// Defines values for HealthResponseChecksStorageStatus.
const (
	HealthResponseChecksStorageStatusHealthy   HealthResponseChecksStorageStatus = "healthy"
	HealthResponseChecksStorageStatusUnhealthy HealthResponseChecksStorageStatus = "unhealthy"
	HealthResponseChecksStorageStatusUnknown   HealthResponseChecksStorageStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDOWN        HealthResponseStatus = "DOWN"
	HealthResponseStatusMAINTENANCE HealthResponseStatus = "MAINTENANCE"
	HealthResponseStatusOK          HealthResponseStatus = "OK"
)

// Defines values for LivenessResponseStatus.
const (
	LivenessResponseStatusDOWN        LivenessResponseStatus = "DOWN"
	LivenessResponseStatusMAINTENANCE LivenessResponseStatus = "MAINTENANCE"
	LivenessResponseStatusOK          LivenessResponseStatus = "OK"
)

// Defines values for LoginFormMethod.
const (
	LoginFormMethodPOST LoginFormMethod = "POST"
)

// Defines values for ReadinessResponseChecksStatus.
const (
	ReadinessResponseChecksStatusHealthy   ReadinessResponseChecksStatus = "healthy"
	ReadinessResponseChecksStatusUnhealthy ReadinessResponseChecksStatus = "unhealthy"
	ReadinessResponseChecksStatusUnknown   ReadinessResponseChecksStatus = "unknown"
)

// Defines values for ReadinessResponseChecksCacheStatus.
const (
	ReadinessResponseChecksCacheStatusHealthy   ReadinessResponseChecksCacheStatus = "healthy"
	ReadinessResponseChecksCacheStatusUnhealthy ReadinessResponseChecksCacheStatus = "unhealthy"
	ReadinessResponseChecksCacheStatusUnknown   ReadinessResponseChecksCacheStatus = "unknown"
)

// Defines values for ReadinessResponseChecksQueueStatus.
const (
	ReadinessResponseChecksQueueStatusHealthy   ReadinessResponseChecksQueueStatus = "healthy"
	ReadinessResponseChecksQueueStatusUnhealthy ReadinessResponseChecksQueueStatus = "unhealthy"
	ReadinessResponseChecksQueueStatusUnknown   ReadinessResponseChecksQueueStatus = "unknown"
)

// Defines values for ReadinessResponseChecksStorageStatus.
const (
	ReadinessResponseChecksStorageStatusHealthy   ReadinessResponseChecksStorageStatus = "healthy"
	ReadinessResponseChecksStorageStatusUnhealthy ReadinessResponseChecksStorageStatus = "unhealthy"
	ReadinessResponseChecksStorageStatusUnknown   ReadinessResponseChecksStorageStatus = "unknown"
)

// Defines values for ReadinessResponseStatus.
const (
	DOWN        ReadinessResponseStatus = "DOWN"
	MAINTENANCE ReadinessResponseStatus = "MAINTENANCE"
	OK          ReadinessResponseStatus = "OK"
)

// Defines values for HealthResponseV1DependencyCheckStatus.
const (
	Healthy   HealthResponseV1DependencyCheckStatus = "healthy"
	Unhealthy HealthResponseV1DependencyCheckStatus = "unhealthy"
	Unknown   HealthResponseV1DependencyCheckStatus = "unknown"
)

// Defines values for ApiVersionHeader.
const (
	ApiVersionHeaderV1 ApiVersionHeader = "v1"
)

// Defines values for GetAnalysisParamsAPIVersion.
const (
	GetAnalysisParamsAPIVersionV1 GetAnalysisParamsAPIVersion = "v1"
)

// Defines values for GetAnalysisEventsParamsAPIVersion.
const (
	GetAnalysisEventsParamsAPIVersionV1 GetAnalysisEventsParamsAPIVersion = "v1"
)

// Defines values for AnalyzeURLParamsAPIVersion.
const (
	AnalyzeURLParamsAPIVersionV1 AnalyzeURLParamsAPIVersion = "v1"
)

// AnalysisData defines model for AnalysisData.
type AnalysisData struct {
	Forms *struct {
		LoginFormDetails *[]struct {
			// Action Form action URL
			Action *string `json:"action,omitempty"`

			// Fields Form field names
			Fields *[]string `json:"fields,omitempty"`

			// Method Form submission method
			Method *AnalysisDataFormsLoginFormDetailsMethod `json:"method,omitempty"`
		} `json:"login_form_details,omitempty"`

		// LoginFormsDetected Number of login forms detected
		LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

		// TotalCount Total number of forms found
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"forms,omitempty"`
	HeadingCounts *struct {
		H1 *int `json:"h1,omitempty"`
		H2 *int `json:"h2,omitempty"`
		H3 *int `json:"h3,omitempty"`
		H4 *int `json:"h4,omitempty"`
		H5 *int `json:"h5,omitempty"`
		H6 *int `json:"h6,omitempty"`
	} `json:"heading_counts,omitempty"`

	// HtmlVersion Detected HTML version
	HtmlVersion *string `json:"html_version,omitempty"`
	Links       *struct {
		// ExternalCount Number of external links
		ExternalCount     *int `json:"external_count,omitempty"`
		InaccessibleLinks *[]struct {
			// Error Error description
			Error *string `json:"error,omitempty"`

			// StatusCode HTTP status code received
			StatusCode *int    `json:"status_code,omitempty"`
			Url        *string `json:"url,omitempty"`
		} `json:"inaccessible_links,omitempty"`

		// InternalCount Number of internal links
		InternalCount *int `json:"internal_count,omitempty"`

		// TotalCount Total number of links
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"links,omitempty"`

	// Title Page title
	Title *string `json:"title,omitempty"`
}

// AnalysisDataFormsLoginFormDetailsMethod Form submission method
type AnalysisDataFormsLoginFormDetailsMethod string

// AnalysisError defines model for AnalysisError.
type AnalysisError struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type
	Error *string `json:"error,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// HttpStatusCode HTTP status code from the target URL (if applicable)
	HttpStatusCode *int                 `json:"http_status_code,omitempty"`
	Status         *AnalysisErrorStatus `json:"status,omitempty"`
}

// AnalysisErrorStatus defines model for AnalysisError.Status.
type AnalysisErrorStatus string

// AnalysisInProgress defines model for AnalysisInProgress.
type AnalysisInProgress struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CurrentStep Current analysis step
	CurrentStep *string `json:"current_step,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Progress Progress percentage
	Progress *int                      `json:"progress,omitempty"`
	Status   *AnalysisInProgressStatus `json:"status,omitempty"`
}

// AnalysisInProgressStatus defines model for AnalysisInProgress.Status.
type AnalysisInProgressStatus string

// AnalysisResponse defines model for AnalysisResponse.
type AnalysisResponse struct {
	// AnalysisId Unique identifier for the analysis
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CreatedAt When the analysis was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Status Current status of the analysis
	Status *AnalysisResponseStatus `json:"status,omitempty"`

	// Url The URL being analyzed
	Url *string `json:"url,omitempty"`
}

// AnalysisResponseStatus Current status of the analysis
type AnalysisResponseStatus string

// AnalysisResult defines model for AnalysisResult.
type AnalysisResult struct {
	AnalysisId  *openapi_types.UUID `json:"analysis_id,omitempty"`
	CompletedAt *time.Time          `json:"completed_at,omitempty"`

	// ContentHash SHA-256 hash of the analyzed content
	ContentHash *string `json:"content_hash,omitempty"`

	// ContentSize Size of the analyzed content in bytes
	ContentSize *int64     `json:"content_size,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`

	// Duration Analysis duration
	Duration *string `json:"duration,omitempty"`
	Results  *struct {
		Forms *struct {
			LoginFormDetails *[]struct {
				// Action Form action URL
				Action *string `json:"action,omitempty"`

				// Fields Form field names
				Fields *[]string `json:"fields,omitempty"`

				// Method Form submission method
				Method *AnalysisResultResultsFormsLoginFormDetailsMethod `json:"method,omitempty"`
			} `json:"login_form_details,omitempty"`

			// LoginFormsDetected Number of login forms detected
			LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

			// TotalCount Total number of forms found
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"forms,omitempty"`
		HeadingCounts *struct {
			H1 *int `json:"h1,omitempty"`
			H2 *int `json:"h2,omitempty"`
			H3 *int `json:"h3,omitempty"`
			H4 *int `json:"h4,omitempty"`
			H5 *int `json:"h5,omitempty"`
			H6 *int `json:"h6,omitempty"`
		} `json:"heading_counts,omitempty"`

		// HtmlVersion Detected HTML version
		HtmlVersion *string `json:"html_version,omitempty"`
		Links       *struct {
			// ExternalCount Number of external links
			ExternalCount     *int `json:"external_count,omitempty"`
			InaccessibleLinks *[]struct {
				// Error Error description
				Error *string `json:"error,omitempty"`

				// StatusCode HTTP status code received
				StatusCode *int    `json:"status_code,omitempty"`
				Url        *string `json:"url,omitempty"`
			} `json:"inaccessible_links,omitempty"`

			// InternalCount Number of internal links
			InternalCount *int `json:"internal_count,omitempty"`

			// TotalCount Total number of links
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"links,omitempty"`

		// Title Page title
		Title *string `json:"title,omitempty"`
	} `json:"results,omitempty"`
	Status *AnalysisResultStatus `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// AnalysisResultResultsFormsLoginFormDetailsMethod Form submission method
type AnalysisResultResultsFormsLoginFormDetailsMethod string

// AnalysisResultStatus defines model for AnalysisResult.Status.
type AnalysisResultStatus string

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// CacheDependencyCheck defines model for CacheDependencyCheck.
type CacheDependencyCheck struct {
	Details *CacheDependencyCheck_Details `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status CacheDependencyCheckStatus `json:"status"`
}

// CacheDependencyCheck_Details defines model for CacheDependencyCheck.Details.
type CacheDependencyCheck_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CacheDependencyCheckStatus Health status of the dependency
type CacheDependencyCheckStatus string

// DependencyCheck defines model for DependencyCheck.
type DependencyCheck struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status DependencyCheckStatus `json:"status"`
}

// DependencyCheckStatus Health status of the dependency
type DependencyCheckStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// FormAnalysis defines model for FormAnalysis.
type FormAnalysis struct {
	LoginFormDetails *[]struct {
		// Action Form action URL
		Action *string `json:"action,omitempty"`

		// Fields Form field names
		Fields *[]string `json:"fields,omitempty"`

		// Method Form submission method
		Method *FormAnalysisLoginFormDetailsMethod `json:"method,omitempty"`
	} `json:"login_form_details,omitempty"`

	// LoginFormsDetected Number of login forms detected
	LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

	// TotalCount Total number of forms found
	TotalCount *int `json:"total_count,omitempty"`
}

// FormAnalysisLoginFormDetailsMethod Form submission method
type FormAnalysisLoginFormDetailsMethod string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Checks Status of individual dependencies
	Checks HealthResponse_Checks `json:"checks"`

	// Status Overall health status - OK only if all dependencies are healthy
	Status HealthResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseChecksStatus Health status of the dependency
type HealthResponseChecksStatus string

// HealthResponse_Checks_Cache_Details defines model for HealthResponse.Checks.Cache.Details.
type HealthResponse_Checks_Cache_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HealthResponseChecksCacheStatus Health status of the dependency
type HealthResponseChecksCacheStatus string

// HealthResponseChecksQueueStatus Health status of the dependency
type HealthResponseChecksQueueStatus string

// HealthResponseChecksStorageStatus Health status of the dependency
type HealthResponseChecksStorageStatus string

// HealthResponse_Checks Status of individual dependencies
type HealthResponse_Checks struct {
	Cache *struct {
		Details *HealthResponse_Checks_Cache_Details `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// HealthResponseStatus Overall health status - OK only if all dependencies are healthy
type HealthResponseStatus string

// InaccessibleLink defines model for InaccessibleLink.
type InaccessibleLink struct {
	// Error Error description
	Error *string `json:"error,omitempty"`

	// StatusCode HTTP status code received
	StatusCode *int    `json:"status_code,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// LinkAnalysis defines model for LinkAnalysis.
type LinkAnalysis struct {
	// ExternalCount Number of external links
	ExternalCount     *int `json:"external_count,omitempty"`
	InaccessibleLinks *[]struct {
		// Error Error description
		Error *string `json:"error,omitempty"`

		// StatusCode HTTP status code received
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"inaccessible_links,omitempty"`

	// InternalCount Number of internal links
	InternalCount *int `json:"internal_count,omitempty"`

	// TotalCount Total number of links
	TotalCount *int `json:"total_count,omitempty"`
}

// LivenessResponse defines model for LivenessResponse.
type LivenessResponse struct {
	// Status Service liveness status
	Status LivenessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version API version
	Version string `json:"version"`
}

// LivenessResponseStatus Service liveness status
type LivenessResponseStatus string

// LoginForm defines model for LoginForm.
type LoginForm struct {
	// Action Form action URL
	Action *string `json:"action,omitempty"`

	// Fields Form field names
	Fields *[]string `json:"fields,omitempty"`

	// Method Form submission method
	Method *LoginFormMethod `json:"method,omitempty"`
}

// LoginFormMethod Form submission method
type LoginFormMethod string

// Pagination defines model for Pagination.
type Pagination struct {
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
	Limit       *int  `json:"limit,omitempty"`
	Page        *int  `json:"page,omitempty"`
	TotalCount  *int  `json:"total_count,omitempty"`
	TotalPages  *int  `json:"total_pages,omitempty"`
}

// PoolStats defines model for PoolStats.
type PoolStats struct {
	// Hits Number of times free connection was found in the pool
	Hits int `json:"hits"`

	// IdleConnections Number of idle connections in the pool
	IdleConnections int `json:"idle_connections"`

	// Misses Number of times free connection was NOT found in the pool
	Misses int `json:"misses"`

	// StaleConnections Number of stale connections removed from the pool
	StaleConnections int `json:"stale_connections"`

	// Timeouts Number of times a wait timeout occurred
	Timeouts int `json:"timeouts"`

	// TotalConnections Number of total connections in the pool
	TotalConnections int `json:"total_connections"`

	// WaitCount Number of times a connection was waited
	WaitCount int `json:"wait_count"`

	// WaitDurationNs Total time spent for waiting a connection in nanoseconds
	WaitDurationNs int `json:"wait_duration_ns"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Checks Status of individual dependencies
	Checks ReadinessResponse_Checks `json:"checks"`

	// Status Overall readiness status - ready only if all dependencies are healthy
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// ReadinessResponseChecksStatus Health status of the dependency
type ReadinessResponseChecksStatus string

// ReadinessResponseChecksCacheStatus Health status of the dependency
type ReadinessResponseChecksCacheStatus string

// ReadinessResponseChecksQueueStatus Health status of the dependency
type ReadinessResponseChecksQueueStatus string

// ReadinessResponseChecksStorageStatus Health status of the dependency
type ReadinessResponseChecksStorageStatus string

// ReadinessResponse_Checks Status of individual dependencies
type ReadinessResponse_Checks struct {
	Cache *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// ReadinessResponseStatus Overall readiness status - ready only if all dependencies are healthy
type ReadinessResponseStatus string

// HealthResponseV1DependencyCheck defines model for health-response.v1_DependencyCheck.
type HealthResponseV1DependencyCheck struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseV1DependencyCheckStatus `json:"status"`
}

// HealthResponseV1DependencyCheckStatus Health status of the dependency
type HealthResponseV1DependencyCheckStatus string

// ApiVersionHeader defines model for ApiVersionHeader.
type ApiVersionHeader string

// BadRequest defines model for bad_request.
type BadRequest struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// NotFound defines model for not_found.
type NotFound struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// RateLimit defines model for rate_limit.
type RateLimit struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// ServerError defines model for server_error.
type ServerError struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// GetAnalysisParams defines parameters for GetAnalysis.
type GetAnalysisParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisParamsAPIVersion defines parameters for GetAnalysis.
type GetAnalysisParamsAPIVersion string

// GetAnalysisEventsParams defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParams struct {
	// Token PASETO authentication token for SSE connection
	Token string `form:"token" json:"token"`

	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisEventsParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisEventsParamsAPIVersion defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParamsAPIVersion string

// AnalyzeURLJSONBody defines parameters for AnalyzeURL.
type AnalyzeURLJSONBody struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// AnalyzeURLParams defines parameters for AnalyzeURL.
type AnalyzeURLParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *AnalyzeURLParamsAPIVersion `json:"API-Version,omitempty"`
}

// AnalyzeURLParamsAPIVersion defines parameters for AnalyzeURL.
type AnalyzeURLParamsAPIVersion string

// AnalyzeURLJSONRequestBody defines body for AnalyzeURL for application/json ContentType.
type AnalyzeURLJSONRequestBody AnalyzeURLJSONBody

// Getter for additional properties for CacheDependencyCheck_Details. Returns the specified
// element and whether it was found
func (a CacheDependencyCheck_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CacheDependencyCheck_Details
func (a *CacheDependencyCheck_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a *CacheDependencyCheck_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a CacheDependencyCheck_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks_Cache_Details. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks_Cache_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks_Cache_Details
func (a *HealthResponse_Checks_Cache_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a *HealthResponse_Checks_Cache_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a HealthResponse_Checks_Cache_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks) Get(fieldName string) (value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks
func (a *HealthResponse_Checks) Set(fieldName string, value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a *HealthResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Details Additional dependency-specific information
				Details *map[string]interface{} `json:"details,omitempty"`

				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// ResponseTime Response time in milliseconds
				ResponseTime *float32 `json:"response_time,omitempty"`

				// Status Health status of the dependency
				Status HealthResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a HealthResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReadinessResponse_Checks. Returns the specified
// element and whether it was found
func (a ReadinessResponse_Checks) Get(fieldName string) (value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReadinessResponse_Checks
func (a *ReadinessResponse_Checks) Set(fieldName string, value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a *ReadinessResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// Status Health status of the dependency
				Status ReadinessResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a ReadinessResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get analysis result
	// (GET /v1/analysis/{analysisId})
	GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams)
	// Get real-time analysis progress
	// (GET /v1/analysis/{analysisId}/events)
	GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams)
	// Analyze a web page
	// (POST /v1/analyze)
	AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams)
	// Health check
	// (GET /v1/health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Liveness probe
	// (GET /v1/liveness)
	LivenessCheck(w http.ResponseWriter, r *http.Request)
	// Readiness probe
	// (GET /v1/readiness)
	ReadinessCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get analysis result
// (GET /v1/analysis/{analysisId})
func (_ Unimplemented) GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time analysis progress
// (GET /v1/analysis/{analysisId}/events)
func (_ Unimplemented) GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Analyze a web page
// (POST /v1/analyze)
func (_ Unimplemented) AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /v1/health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Liveness probe
// (GET /v1/liveness)
func (_ Unimplemented) LivenessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness probe
// (GET /v1/readiness)
func (_ Unimplemented) ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnalysis operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysis(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysis(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalysisEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysisEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoQueryAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisEventsParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisEventsParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysisEvents(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AnalyzeURL operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeURL(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeURLParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion AnalyzeURLParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeURL(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LivenessCheck operation middleware
func (siw *ServerInterfaceWrapper) LivenessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LivenessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadinessCheck operation middleware
func (siw *ServerInterfaceWrapper) ReadinessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadinessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}", wrapper.GetAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}/events", wrapper.GetAnalysisEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/analyze", wrapper.AnalyzeURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/liveness", wrapper.LivenessCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/readiness", wrapper.ReadinessCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
